name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: '1.22'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.19', '1.20', '1.21', '1.22']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-

    - name: Download dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.22'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-

    - name: Download dependencies
      run: go mod download

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: go mod download

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
        exclude:
          - os: windows
            arch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ env.GO_VERSION }}-

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      env:
        GOOS: ${{ matrix.os }}
        GOARCH: ${{ matrix.arch }}
      run: |
        ext=""
        if [ "${{ matrix.os }}" = "windows" ]; then
          ext=".exe"
        fi
        go build -ldflags="-w -s" -o "staticsocket-${{ matrix.os }}-${{ matrix.arch }}${ext}" .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: staticsocket-${{ matrix.os }}-${{ matrix.arch }}
        path: staticsocket-${{ matrix.os }}-${{ matrix.arch }}*

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [test, build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download dependencies
      run: go mod download

    - name: Build binary
      run: go build -o staticsocket .

    - name: Test CLI functionality
      run: |
        # Test basic functionality
        ./staticsocket -path testdata/samples -format json > output.json
        cat output.json
        
        # Verify output contains expected data
        if ! grep -q "total_count" output.json; then
          echo "Error: Expected total_count in output"
          exit 1
        fi
        
        if ! grep -q "ingress" output.json; then
          echo "Error: Expected ingress traffic in output"
          exit 1
        fi
        
        if ! grep -q "egress" output.json; then
          echo "Error: Expected egress traffic in output"
          exit 1
        fi
        
        echo "CLI integration test passed!"

    - name: Test different output formats
      run: |
        # Test YAML output
        ./staticsocket -path testdata/samples -format yaml > output.yaml
        if ! grep -q "total_count:" output.yaml; then
          echo "Error: YAML output format failed"
          exit 1
        fi
        
        # Test CSV output
        ./staticsocket -path testdata/samples -format csv > output.csv
        if ! grep -q "Type,Protocol" output.csv; then
          echo "Error: CSV output format failed"
          exit 1
        fi
        
        echo "Output format tests passed!"